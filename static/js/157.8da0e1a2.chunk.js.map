{"version":3,"file":"static/js/157.8da0e1a2.chunk.js","mappings":"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","sources":["components/dateplanner/attendenceInput/DateField.js","components/dateplanner/overview/Overview.styled.js","components/dateplanner/overview/EvalDiagram.js","components/dateplanner/overview/Overview.js"],"sourcesContent":["const DateField = ({dateprops}) => {\n    const date = new Date(dateprops.Date)\n    const dayOfWeek = getDayOfWeek(date.getDay())\n\n    const day = date.getDate()\n    const month = date.getMonth()\n    const year = date.getFullYear()\n\n    return(\n        <div>{dateprops.Type} {dateprops.Location}<br />{day}. {getMonthString(month)} {year}<br />{dayOfWeek}</div>\n    )\n}\n\nconst getDayOfWeek = (d_o_w) => {\n    switch(d_o_w){\n    default:\n        return \"\"\n    case 0:\n        return \"Sonntag\"\n    case 1:\n        return \"Montag\"\n    case 2:\n        return \"Dienstag\"\n    case 3:\n        return \"Mittwoch\"\n    case 4:\n        return \"Donnerstag\"\n    case 5:\n        return \"Freitag\"\n    case 6:\n        return \"Samstag\"\n    }\n}\n\nconst getMonthString = (month) => {\n    switch(month){\n    default:\n        return \"\"\n    case 0:\n        return \"Januar\"\n    case 1:\n        return \"Februar\"\n    case 2:\n        return \"MÃ¤rz\"\n    case 3:\n        return \"April\"\n    case 4:\n        return \"Mai\"\n    case 5:\n        return \"Juni\"\n    case 6:\n        return \"Juli\"\n    case 7:\n        return \"August\"\n    case 8:\n        return \"September\"\n    case 9:\n        return \"Oktober\"\n    case 10:\n        return \"November\"\n    case 11:\n        return \"Dezember\"\n    }\n}\n\nexport default DateField","import styled from \"styled-components\";\n\nexport const StyledOverview = styled.div`\n    display: flex;\n    flex-direction: column;\n    align-content: center;\n    margin: auto;\n    align-items: center;\n\n    select {\n        width: fit-content;\n    }\n`\n\nexport const StyledOverviewTable = styled.table`\n\n    table-layout: fixed;\n\n    border-collapse: collapse;\n    position: relative;\n    overflow: scroll;\n    align-self: flex-start;\n    margin: 0 2px 0 2px;\n\n    tbody {\n        overflow-x: scroll;\n    }\n\n    td {\n        border: 1px solid ${({ theme }) => theme.primaryLight};\n        padding: 2px;\n        text-align: center;\n        position: relative;\n        min-width: 32px;\n        \n        .IconWrapper {\n            min-width: 1.5em;\n            max-width: 32px;\n            min-height: 1.5em;\n            max-height: 32px;\n            position: absolute;\n\n            transform: translateX(-50%) translateY(-50%);\n            :nth-child(1) {\n                z-index: 2;\n            }\n        }\n    }\n\n    th {\n        min-width: 15px;\n        max-width: 40px;\n    }\n\n    @media (max-width: ${({ theme }) => theme.mobile}) {\n        display: none;\n    }\n`\n\nexport const StyledEvalTable = styled.table`\n    border-collapse: collapse;\n    position: relative;\n    margin: 0 2px 0 2px;\n\n    tr {\n        max-height: 100px;\n    }\n\n    td {\n        text-align: center;\n        border: 1px solid ${({ theme }) => theme.primaryLight};\n\n        > img {\n            min-width: 15px;\n            width: 100%;\n            max-width: 30px;\n        }\n    }\n\n    @media (max-width: ${({ theme }) => theme.mobile}) {\n        thead, td {\n            display: none;\n        }\n    }\n`\n\nexport const StyledEvalDiagram = styled.div`\n    @media (min-width: ${({theme}) => theme.mobile}) {\n        div {\n            display: none;\n        }\n    }\n`","import {\n    Chart as ChartJS,\n    CategoryScale,\n    LinearScale,\n    BarElement,\n    Title,\n    Tooltip,\n    Legend,\n  } from 'chart.js'\nimport { Bar } from \"react-chartjs-2\"\nimport DateField from '../attendenceInput/DateField';\nimport { StyledEvalDiagram } from './Overview.styled';\n\nconst EvalDiagram = ({ event }) => {\n\n    ChartJS.register(\n        CategoryScale,\n        LinearScale,\n        BarElement,\n        Title,\n        Tooltip,\n        Legend\n      )\n\n    const options = {\n        indexAxis: 'y',\n        plugins: {\n          title: {\n            display: false,\n          },\n          legend: {\n            display: false\n          }\n        },\n        responsive: false,\n        scales: {\n          x: {\n            stacked: true,\n            display: false\n          },\n          y: {\n            stacked: true,\n          },\n        },\n      };\n\n    const labels = ['']\n\n    const data = {\n        labels,\n        datasets: [\n            {\n                data: [event.Consent],\n                backgroundColor: 'rgb(0, 186, 0)'\n            },\n            {\n                data: [event.Missing],\n                backgroundColor: 'rgb(37, 183, 211)'\n            },\n            {\n                data: [event.Maybe],\n                backgroundColor: 'rgb(255, 161, 31)'\n            },\n            {\n                data: [event.Refusal],\n                backgroundColor: 'rgb(255, 0, 0)'\n            }\n        ],\n    }\n\n    return(\n        <StyledEvalDiagram>\n            <DateField dateprops={event}/>\n            <Bar height={\"60px\"} options={options} data={data} />\n        </StyledEvalDiagram>\n    )\n}\n\nexport default EvalDiagram","import { useCallback, useEffect, useState } from \"react\"\n\nimport { getAllAttendences, getEval, /*getMissingFeedback,*/ getOwnUsergroups } from '../../../modules/data/DBConnect'\n\nimport DateField from \"../attendenceInput/DateField\"\nimport { StyledEvalTable, StyledOverview, StyledOverviewTable } from \"./Overview.styled\"\nimport EvalDiagram from \"./EvalDiagram\"\nimport { Alert, Blank, Check, Deny } from \"../attendenceInput/Terminzusage\"\nimport { IoReload } from \"react-icons/io5\"\n\nconst Overview = () => {\n\n    const [usergroups, setUsergroups] = useState(new Array(0))\n    const [selectedUsergroup_ID, setSelectedUsergroup_ID] = useState()\n\n    const [attendences, setAttendences] = useState(new Array(0))\n    const [evaluation, setEvaluation] = useState(new Array(0))\n    //const [missingFeedback, setMissingFeedback] = useState(new Array(0))\n\n    const fetchUsergroups = async () => {\n        let _usergroups = await getOwnUsergroups()\n        setUsergroups(_usergroups)\n    }\n\n    const fetchAttendences = useCallback(async () => {\n        let _attendences = await getAllAttendences(selectedUsergroup_ID)\n        setAttendences(_attendences)\n    }, [selectedUsergroup_ID])\n\n    /*\n    const fetchMissingFeedback = async () => {\n        let _missingFeedback = await getMissingFeedback()\n        setMissingFeedback(_missingFeedback)\n    }\n    */\n\n    const fetchEval = useCallback(async () => {\n        let _eval = await getEval(selectedUsergroup_ID)\n        setEvaluation(_eval)\n    }, [selectedUsergroup_ID])\n\n    const onUsergroupChange = useCallback((e) => {\n        setSelectedUsergroup_ID(e.target.value)\n    }, [setSelectedUsergroup_ID])\n\n    const reload = useCallback(() => {\n        fetchAttendences()\n        fetchEval()\n    }, [fetchAttendences, fetchEval])\n\n    useEffect(() => {\n        fetchUsergroups()\n        reload()\n    }, [reload])\n\n    if(attendences.length === 0){\n        return(\n            <select name=\"usergroup\" id=\"usergroup_select\" onChange={onUsergroupChange}>\n                {usergroups.map((usergroup, index) => {\n                    return(<option key={index} value={usergroup.Usergroup_ID}>{usergroup.Title}</option>)\n                })}\n            </select>\n        )\n    } else {\n        return(\n            <StyledOverview>\n                <div>\n                    <select name=\"usergroup\" id=\"usergroup_select\" onChange={onUsergroupChange}>\n                        {usergroups.map((usergroup, index) => {\n                            return(<option key={index} value={usergroup.Usergroup_ID}>{usergroup.Title}</option>)\n                        })}\n                    </select>\n                    <IoReload onClick={reload}/>\n                </div>\n                <OverviewTable attendences={attendences}/>\n                <EvalTable evaluation={evaluation}/>\n            {/*Fehlende RÃ¼ckmeldungen:*/}\n            {/*missingFeedback.map(missing => {\n                return(<div>{missing.Forename} {missing.Surname}</div>)\n            })*/}\n            </StyledOverview>\n        )\n    }\n}\n\nconst Zusage = ({attendence}) => {\n    switch(attendence){\n    default:\n    case -1:\n        return(<Blank/>)\n    case 0:\n        return(<Deny />)\n    case 1:\n        return(<Check />)\n    case 2:\n        return(<Alert />)\n    }\n}\n\nconst OverviewTable = ({attendences}) => {\n    return(\n        <StyledOverviewTable>\n            <thead>\n                <tr>\n                    <th>Termin:</th>\n                    {attendences[0].Attendences.map((att) => {\n                        return(<th key={att.Fullname}>{att.Fullname.split(' ')[0].slice(0, 2)}{att.Fullname.split(' ')[1][0]}</th>)\n                    })}\n                </tr>\n            </thead>\n            <tbody>\n                {\n                    attendences.map(event => {\n                        return(\n                            <tr key={event.Event_ID}>\n                                <td><DateField dateprops={event}/></td>\n                                {event.Attendences.map(attendence => {\n                                    return(<td key={attendence.Fullname + event.Event_ID}><Zusage attendence={attendence.Attendence} /></td>)\n                                })}\n                            </tr>\n                        )\n                    })\n                }\n            </tbody>\n            </StyledOverviewTable>\n    )\n}\n\nconst EvalTable = ({evaluation}) => {\n    return(\n        <StyledEvalTable>\n            <thead>\n                <th>Termin</th>\n                <th>Zu.</th>\n                <th>Ab.</th>\n                <th>Aus.</th>\n                <th>Vllt.</th>\n                <th>M</th>\n                <th>S</th>\n                <th>D</th>\n                <th>A</th>\n                <th>T</th>\n                <th>L</th>\n                <th>Tr</th>\n                <th>B</th>\n                <th>P</th>\n            </thead>\n            <tbody>\n                {evaluation.map(event => {\n                    return(<EvalRow event={event} />)\n                })}\n            </tbody>\n        </StyledEvalTable>\n    )\n}\n\nconst EvalRow = ({ event }) => {\n    return(\n        <tr>\n            <td><DateField dateprops={event} /></td>\n            <td>{event.Consent}</td>\n            <td>{event.Refusal}</td>\n            <td>{event.Missing}</td>\n            <td>{event.Maybe}</td>\n            <td>{event.Instruments.Major}</td>\n            <td>{event.Instruments.Sopran}</td>\n            <td>{event.Instruments.Diskant}</td>\n            <td>{event.Instruments.Alt}</td>\n            <td>{event.Instruments.Tenor}</td>\n            <td>{event.Instruments.Lyra}</td>\n            <td>{event.Instruments.Trommel}</td>\n            <td>{event.Instruments.Becken}</td>\n            <td>{event.Instruments.Pauke}</td>\n            <EvalDiagram event={event}/>\n        </tr>\n    )\n}\n\nexport default Overview"],"names":["getDayOfWeek","d_o_w","getMonthString","month","dateprops","date","Date","dayOfWeek","getDay","day","getDate","getMonth","year","getFullYear","Type","Location","StyledOverview","styled","StyledOverviewTable","theme","primaryLight","mobile","StyledEvalTable","StyledEvalDiagram","event","ChartJS","CategoryScale","LinearScale","BarElement","Title","Tooltip","Legend","data","labels","datasets","Consent","backgroundColor","Missing","Maybe","Refusal","DateField","height","options","indexAxis","plugins","title","display","legend","responsive","scales","x","stacked","y","Zusage","attendence","Blank","Deny","Check","Alert","OverviewTable","attendences","Attendences","map","att","Fullname","split","slice","Attendence","Event_ID","EvalTable","evaluation","EvalRow","Instruments","Major","Sopran","Diskant","Alt","Tenor","Lyra","Trommel","Becken","Pauke","useState","Array","usergroups","setUsergroups","selectedUsergroup_ID","setSelectedUsergroup_ID","setAttendences","setEvaluation","fetchUsergroups","getOwnUsergroups","_usergroups","fetchAttendences","useCallback","getAllAttendences","_attendences","fetchEval","getEval","_eval","onUsergroupChange","e","target","value","reload","useEffect","length","name","id","onChange","usergroup","index","Usergroup_ID","onClick"],"sourceRoot":""}