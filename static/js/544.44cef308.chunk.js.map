{"version":3,"file":"static/js/544.44cef308.chunk.js","mappings":"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","sources":["components/dateplanner/attendenceInput/AttendenceTable.jsx","components/dateplanner/attendenceInput/DateField.js"],"sourcesContent":["import DateField from './DateField'\nimport Terminzusage from './Terminzusage'\n\nimport four from '../4.png'\nimport five from '../5.png'\nimport styled from 'styled-components'\nimport { useEffect, useState } from 'react'\n\nconst AttendenceTable = ({ attendences, fullname, states, selectedDateFilter, selectedEventFilter, onClick}) => {\n\n    const [oneUsergroup, setOneUsergroup] = useState(true)\n\n    useEffect(() => {\n        setOneUsergroup(attendences.every(att => att.Usergroup_ID === attendences[0].Usergroup_ID))\n    }, [attendences])\n\n    return(\n        <Table>\n            <thead>\n                <tr>\n                    <th>Termine: {oneUsergroup ? usergroupLogo(attendences[0]?.Usergroup_ID) : <></>}</th>\n                    <th>{fullname}</th>\n                    <th></th>\n                </tr>\n            </thead>\n            <tbody>\n                {attendences\n                .filter(attendence => {\n                    let attDate = new Date(attendence.Date)\n                    attDate.setHours(23,59,59,999)\n                    let today = new Date()\n                    return today <= attDate\n                })\n                .filter(attendence => {\n                    switch(selectedEventFilter){\n                    default:\n                    case 'all':\n                        return true\n                    case 'practice':\n                        return attendence.Type.includes('Probe') || attendence.Type.includes('Üben')\n                    case 'else':\n                        return !(attendence.Type.includes('Probe') || attendence.Type.includes('Üben'))\n                    }\n                })\n                .filter(attendence => {\n                    let attDate = new Date(attendence.Date)\n                    let today = new Date()\n                    switch(selectedDateFilter){\n                    default:\n                    case 'all':\n                        return true\n                    case 'one':\n                        return (attDate.getTime() - today.getTime()) < 1*604800000\n                    case 'two':\n                        return (attDate.getTime() - today.getTime()) < 2*604800000\n                    case 'four':\n                        return (attDate.getTime() - today.getTime()) < 4*604800000\n                    case 'eight':\n                        return (attDate.getTime() - today.getTime()) < 8*604800000                            \n                    }\n                })\n                .map((att) => {\n\n                    return(\n                        <tr key={att.Location + att.Event_ID}>\n                            {!oneUsergroup ? <TableData>{usergroupLogo(att.Usergroup_ID)}</TableData> : <></>}\n                            <TableData><DateField dateprops={att} /></TableData>\n                            <TableData><Terminzusage states={states} attendence={att.Attendence} onClick={onClick} event_id={att.Event_ID} cancelled={att.Type.includes('Abgesagt')}/></TableData>\n                        </tr>\n                    )\n                })}\n            </tbody>\n        </Table>\n    )\n}\n\nconst usergroupLogo = (usergroup_id) => {\n    let id = parseInt(usergroup_id)\n    switch(id){\n    case 4:\n        return <img src={four} alt=\"Logo Rönk\"/>\n    case 5:\n        return <img src={five} alt=\"Logo Dün\"/>\n    case 7:\n        return <img src=\"https://sgv.de/assets/images/1/logo_sgv_web-fc5e97ec.svg\" alt=\"Logo SGV\" />\n    default:\n        return <></>\n    }\n}\n\nconst Table = styled.table`\n    border-collapse: collapse;\n\n    img {\n        max-height: 64px;\n        max-width: 64px;\n    }\n\n    th {\n        img {\n            transform: translateY(20%);\n            max-height: 27px;\n            max-width: 128px;\n        }\n    }\n`\n\nconst TableData = styled.td`\n    border-top: 1px solid #ccc;\n    :nth-child(1) {\n        text-align: center;\n    }\n    :nth-child(2) {\n        text-align: center;\n    }\n`\n\nexport default AttendenceTable","const DateField = ({dateprops}) => {\n    const date = new Date(dateprops.Date)\n    const dayOfWeek = getDayOfWeek(date.getDay())\n\n    const day = date.getDate()\n    const month = date.getMonth()\n    const year = date.getFullYear()\n\n    return(\n        <div>{dateprops.Type} {dateprops.Location}<br />{day}. {getMonthString(month)} {year}<br />{dayOfWeek}</div>\n    )\n}\n\nconst getDayOfWeek = (d_o_w) => {\n    switch(d_o_w){\n    default:\n        return \"\"\n    case 0:\n        return \"Sonntag\"\n    case 1:\n        return \"Montag\"\n    case 2:\n        return \"Dienstag\"\n    case 3:\n        return \"Mittwoch\"\n    case 4:\n        return \"Donnerstag\"\n    case 5:\n        return \"Freitag\"\n    case 6:\n        return \"Samstag\"\n    }\n}\n\nconst getMonthString = (month) => {\n    switch(month){\n    default:\n        return \"\"\n    case 0:\n        return \"Januar\"\n    case 1:\n        return \"Februar\"\n    case 2:\n        return \"März\"\n    case 3:\n        return \"April\"\n    case 4:\n        return \"Mai\"\n    case 5:\n        return \"Juni\"\n    case 6:\n        return \"Juli\"\n    case 7:\n        return \"August\"\n    case 8:\n        return \"September\"\n    case 9:\n        return \"Oktober\"\n    case 10:\n        return \"November\"\n    case 11:\n        return \"Dezember\"\n    }\n}\n\nexport default DateField"],"names":["usergroupLogo","usergroup_id","parseInt","_jsx","src","four","alt","five","_Fragment","Table","styled","table","_templateObject","_taggedTemplateLiteral","TableData","td","_templateObject2","_ref","_attendences$","attendences","fullname","states","selectedDateFilter","selectedEventFilter","onClick","_useState","useState","_useState2","_slicedToArray","oneUsergroup","setOneUsergroup","useEffect","every","att","Usergroup_ID","_jsxs","children","filter","attendence","attDate","Date","setHours","Type","includes","today","getTime","map","DateField","dateprops","Terminzusage","Attendence","event_id","Event_ID","cancelled","Location","getDayOfWeek","d_o_w","getMonthString","month","date","dayOfWeek","getDay","day","getDate","getMonth","year","getFullYear"],"sourceRoot":""}