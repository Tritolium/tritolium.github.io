{"version":3,"file":"static/js/697.45f16c8d.chunk.js","mappings":"uPAEaA,E,QAAmBC,GAAAA,IAAH,q8BAiBH,qBAAEC,MAAiBC,YAAnB,IACL,qBAAED,MAAiBE,WAAnB,I,SCYfC,EAAgB,SAAC,GAA0B,IAAxBC,EAAuB,EAAvBA,OAAQC,EAAe,EAAfA,SAE7B,GAA4BC,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KAMA,OACI,UAACC,EAAA,EAAD,YACI,kBAAOC,KAAK,OAAOC,SANL,SAACC,GACnBJ,EAAUI,EAAEC,OAAOC,MAAMC,cAC5B,IAKQX,EACAY,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEE,MAAMC,cAAcF,EAAEC,MAAlC,IACLE,QAAO,SAAAC,GACJ,OAAOA,EAAMH,MAAMJ,cAAcQ,SAAShB,EAC7C,IACAiB,KAAI,SAAAF,GACD,OAAO,SAACG,EAAD,CAAOpB,SAAUA,EAA+BiB,MAAOA,GAAvBA,EAAMI,SAChD,MAGZ,EAEKD,EAAQ,SAAC,GAAyB,IAAvBpB,EAAsB,EAAtBA,SAAUiB,EAAY,EAAZA,MAEjBK,GAAUC,EAAAA,EAAAA,cAAY,WACxBvB,EAASiB,EAAMI,SAClB,GAAE,CAACrB,EAAUiB,IAEd,OAAO,SAACO,EAAA,EAAD,CAAcF,QAASA,EAAvB,SACFL,EAAMH,OAEd,EAEKW,EAAa,SAAC,GAAe,IAAbR,EAAY,EAAZA,MAClB,OAAO,2BACG,OAALA,QAAK,IAALA,GAAAA,EAAOS,MAAO,cAAGC,KAAI,OAAEV,QAAF,IAAEA,OAAF,EAAEA,EAAOS,KAAMlB,OAAO,SAASoB,IAAI,aAA1C,wCAAuF,wBAChG,OAALX,QAAK,IAALA,GAAAA,EAAOS,MAAO,mBAAQG,MAAM,aAAaC,IAAKb,EAAMS,QAAkB,0BAE9E,EAED,EAnEmB,WACf,OAA4BzB,EAAAA,EAAAA,UAAS,IAAI8B,MAAM,IAA/C,eAAOhC,EAAP,KAAeiC,EAAf,KACA,GAAgC/B,EAAAA,EAAAA,WAAU,GAA1C,eAAOgC,EAAP,KAAiBC,EAAjB,KAEMC,GAAcZ,EAAAA,EAAAA,cAAW,iBAAC,qGACTa,EAAAA,EAAAA,MADS,OACxBrC,EADwB,OAGxBiC,OADUK,IAAXtC,EACWA,EAEA,IAAIgC,MAAM,IALI,2CAM7B,IAEG/B,GAAWuB,EAAAA,EAAAA,cAAY,SAACe,GAC1BJ,EAAYI,EACf,GAAE,IAMH,OAJAC,EAAAA,EAAAA,YAAU,WACNJ,GACH,GAAE,CAACA,KAEG,UAAC1C,EAAD,YACH,SAACK,EAAD,CAAeC,OAAQA,EAAQC,SAAUA,KACzC,SAACyB,EAAD,CAAYR,MAAOlB,EAAOyC,MAAK,SAACvB,GAAD,OAAWA,EAAMI,WAAaY,CAA9B,QAEtC,C,oCC5BK7B,E,QAAWV,GAAAA,IAAH,0nBAIU,qBAAGC,MAAkBC,YAArB,IASC,qBAAGD,MAAkB8C,MAArB,IAaH,qBAAG9C,MAAkBC,YAArB,IAKA,qBAAGD,MAAkB+C,YAArB,IAItB,K,sCCnCMlB,E,QAAe9B,GAAAA,IAAH,oKAOI,qBAAGC,MAAkB+C,YAArB,IAItB,K","sources":["components/scoreboard/Scoreboard.styled.js","components/scoreboard/Scoreboard.js","modules/components/form/Selector.js","modules/components/form/SelectorItem.js"],"sourcesContent":["import styled from \"styled-components\";\n\nexport const StyledScoreboard = styled.div`\n    padding: env(safe-area-inset-top) env(safe-area-inset-right) env(safe-area-inset-bottom) env(safe-area-inset-left);\n    display: flex;\n    flex-direction: row;\n    position: relative;\n    width: 100%;\n\n    div {\n        width: 100%;\n        display: flex;\n        flex-direction: column;\n\n\n        a, a:active {\n            width: fit-content;\n            border-radius: 5px;\n            padding: 2px;\n            background: ${({theme}) => theme.primaryLight};\n            color: ${({theme}) => theme.primaryDark};\n        }\n    }\n\n    nav {\n        display: flex;\n        flex-direction: column;    \n\n        input[type=text] {\n            margin: 2px;\n            border-radius: 8px;\n            border-width: 0;\n            padding-left: 8px;\n            max-width: calc(100% - 8px);\n        }\n        div {\n            text-align: left;\n        }\n    }\n\n    iframe {\n        max-width: 215mm;\n        width: 100%;\n        aspect-ratio: 210/297;\n    }\n`","import { useCallback, useEffect, useState } from \"react\"\nimport Selector from \"../../modules/components/form/Selector\"\nimport SelectorItem from \"../../modules/components/form/SelectorItem\"\nimport { getScores } from \"../../modules/data/DBConnect\"\nimport { StyledScoreboard } from \"./Scoreboard.styled\"\n\nconst Scoreboard = () => {\n    const [scores, setScores] = useState(new Array(0))\n    const [selected, setSelected] = useState(-1)\n    \n    const fetchScores = useCallback(async () => {\n        let scores = await getScores()\n        if(scores !== undefined)\n            setScores(scores)\n        else\n            setScores(new Array(0))\n    }, [])\n\n    const onSelect = useCallback((id) => {\n        setSelected(id)\n    }, [])\n\n    useEffect(() => {\n        fetchScores()\n    }, [fetchScores])\n\n    return(<StyledScoreboard>\n        <ScoreSelector scores={scores} onSelect={onSelect}/>\n        <ScoreFrame score={scores.find((score) => score.Score_ID === selected)}/>\n    </StyledScoreboard>)\n}\n\nconst ScoreSelector = ({ scores, onSelect }) => {\n\n    const [search, setSearch] = useState(\"\")\n\n    const searchChanged = (e) => {\n        setSearch(e.target.value.toLowerCase())\n    }\n\n    return(\n        <Selector>\n            <input type=\"text\" onChange={searchChanged}></input>\n            {scores\n            .sort((a, b) => a.Title.localeCompare(b.Title))\n            .filter(score => {\n                return score.Title.toLowerCase().includes(search)\n            })\n            .map(score => {\n                return(<Score onSelect={onSelect} key={score.Score_ID} score={score}/>)\n            })}\n        </Selector>\n    )\n}\n\nconst Score = ({ onSelect, score }) => {\n\n    const onClick = useCallback(() => {\n        onSelect(score.Score_ID)\n    }, [onSelect, score])\n\n    return(<SelectorItem onClick={onClick}>\n        {score.Title}\n    </SelectorItem>)\n}\n\nconst ScoreFrame = ({ score }) => {\n    return(<div>\n        {score?.Link ? <a href={score?.Link} target=\"_blank\" rel=\"noreferrer\">In neuem Fenster anzeigen</a> : <></>}\n        {score?.Link ? <iframe title=\"score_view\" src={score.Link}></iframe> : <></>}\n    </div>)\n}\n\nexport default Scoreboard","import styled from \"styled-components\"\n\nconst Selector = styled.nav`\n    margin: 2px;\n    padding: 2px;\n    white-space: nowrap;\n    border: 1px solid ${({ theme }) => theme.primaryLight};\n    border-radius: 10px;\n    overflow-y: scroll;\n    max-height: 75vh;\n    min-width: fit-content;\n    width: auto;\n    max-width: fit-content;\n\n\n    @media (max-width: ${({ theme }) => theme.mobile}) {\n        white-space: normal;\n    }\n\n    ::-webkit-scrollbar {\n        width: 5px;\n    }\n\n    ::-webkit-scrollbar-track {\n        background: none;\n    }\n\n    ::-webkit-scrollbar-thumb {\n        background: ${({ theme }) => theme.primaryLight};\n        border-radius: 5px;\n    }\n\n    ::-webkit-scrollbar-thumb:hover {\n        background: ${({ theme }) => theme.primaryHover};\n    }\n`\n\nexport default Selector","import styled from \"styled-components\"\n\nconst SelectorItem = styled.div`\n    user-select: none;\n    cursor: pointer;\n    padding: 2px;\n    border-radius: 5px;\n\n    &:hover {\n        background: ${({ theme }) => theme.primaryHover};\n    }\n`\n\nexport default SelectorItem"],"names":["StyledScoreboard","styled","theme","primaryLight","primaryDark","ScoreSelector","scores","onSelect","useState","search","setSearch","Selector","type","onChange","e","target","value","toLowerCase","sort","a","b","Title","localeCompare","filter","score","includes","map","Score","Score_ID","onClick","useCallback","SelectorItem","ScoreFrame","Link","href","rel","title","src","Array","setScores","selected","setSelected","fetchScores","getScores","undefined","id","useEffect","find","mobile","primaryHover"],"sourceRoot":""}