{"version":3,"file":"static/js/252.11131a06.chunk.js","mappings":"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","sources":["components/dateplanner/attendenceInput/AttendenceTable.jsx","components/dateplanner/attendenceInput/DateField.js"],"sourcesContent":["import DateField from './DateField'\nimport Terminzusage from './Terminzusage'\nimport PlusOne from '../../../modules/components/icons/PlusOne'\n\nimport four from '../4.png'\nimport five from '../5.png'\nimport styled from 'styled-components'\nimport { useEffect, useState } from 'react'\nimport { updateAttendence } from '../../../modules/data/DBConnect'\n\nconst AttendenceTable = ({ attendences, fullname, states, selectedDateFilter, selectedEventFilter, theme}) => {\n\n    const [oneAssociation, setOneAssociation] = useState(true)\n\n    useEffect(() => {\n        setOneAssociation(attendences.every(att => att.Association_ID === attendences[0].Association_ID))\n    }, [attendences])\n\n    return(\n        <Table>\n            <thead>\n                <tr>\n                    <th>Termine: {oneAssociation ? associationLogo(attendences[0]?.Association_ID) : <></>}</th>\n                    <th>{fullname}</th>\n                    <th></th>\n                </tr>\n            </thead>\n            <tbody>\n                {attendences\n                .filter(attendence => {\n                    let attDate = new Date(attendence.Date)\n                    attDate.setHours(23,59,59,999)\n                    let today = new Date()\n                    return today <= attDate\n                })\n                .filter(attendence => {\n                    switch(selectedEventFilter){\n                    default:\n                    case 'all':\n                        return true\n                    case 'practice':\n                        return attendence.Category === 'practice'\n                    case 'event':\n                        return attendence.Category === 'event'\n                    case 'other':\n                        return attendence.Category === 'other'\n                    }\n                })\n                .filter(attendence => {\n                    let attDate = new Date(attendence.Date)\n                    let today = new Date()\n                    switch(selectedDateFilter){\n                    default:\n                    case 'all':\n                        return true\n                    case 'one':\n                        return (attDate.getTime() - today.getTime()) < 1*604800000\n                    case 'two':\n                        return (attDate.getTime() - today.getTime()) < 2*604800000\n                    case 'four':\n                        return (attDate.getTime() - today.getTime()) < 4*604800000\n                    case 'eight':\n                        return (attDate.getTime() - today.getTime()) < 8*604800000                            \n                    }\n                })\n                .map((att) => {\n                    return(\n                        <Event key={att.Location + att.Event_ID} att={att} states={states} oneAssociation={oneAssociation} theme={theme} />\n                    )\n                })}\n            </tbody>\n        </Table>\n    )\n}\n\nconst Event = ({ att, states, oneAssociation, theme }) => {\n    const [plusone, setPlusone] = useState(att.PlusOne)\n    const [attendence, setAttendence] = useState(att.Attendence)\n\n    const onClick = async () => {\n        let newAttendence = (attendence + 1) % states\n        await updateAttendence(att.Event_ID, newAttendence, plusone)\n        setAttendence(newAttendence)\n    }\n\n    const togglePlusOne = async () => {\n        if(attendence === 1){\n            await updateAttendence(att.Event_ID, attendence, !plusone)\n            setPlusone(!plusone)\n        }\n\n    }\n\n    return(\n        <tr key={att.Location + att.Event_ID}>\n            {!oneAssociation ? <TableData>{associationLogo(att.Association_ID)}</TableData> : <></>}\n            <TableData><DateField dateprops={att} /></TableData>\n            <TableData><Terminzusage event={att} states={states} attendence={attendence} onClick={onClick} event_id={att.Event_ID} cancelled={att.Type.includes('Abgesagt')} theme={theme}/></TableData>\n            {att.Ev_PlusOne ? <TableData><PlusOne active={attendence === 1} plusOne={plusone} onClick={togglePlusOne} theme={theme} /></TableData> : <TableData></TableData>}\n        </tr>\n    )\n}\n\nconst associationLogo = (association_id) => {\n    const id = parseInt(association_id)\n    switch(id){\n    case 1:\n        return <img src={four} alt=\"Logo Rönk\"/>\n    case 2:\n        return <img src={five} alt=\"Logo Dün\"/>\n    case 3:\n        return <img src=\"https://sgv.de/assets/images/1/logo_sgv_web-fc5e97ec.svg\" alt=\"Logo SGV\" />\n    default:\n        return <></>\n    }\n}\n\nconst Table = styled.table`\n    border-collapse: collapse;\n\n    img {\n        max-height: 64px;\n        max-width: 64px;\n    }\n\n    th {\n        img {\n            transform: translateY(20%);\n            max-height: 27px;\n            max-width: 128px;\n        }\n    }\n\n    tr {\n        td:nth-child(1) {\n            text-align: center;\n        }\n        :nth-child(2) {\n            text-align: center;\n        }\n    }\n`\n\nconst TableData = styled.td`\n    border-top: 1px solid #ccc;\n`\n\nexport default AttendenceTable","const DateField = ({dateprops}) => {\n    const date = new Date(dateprops.Date)\n    const dayOfWeek = getDayOfWeek(date.getDay())\n\n    const day = date.getDate()\n    const month = date.getMonth()\n    const year = date.getFullYear()\n\n    return(\n        <div>{dateprops.Type} {dateprops.Location}<br />{day}. {getMonthString(month)} {year}<br />{dayOfWeek}</div>\n    )\n}\n\nconst getDayOfWeek = (d_o_w) => {\n    switch(d_o_w){\n    default:\n        return \"\"\n    case 0:\n        return \"Sonntag\"\n    case 1:\n        return \"Montag\"\n    case 2:\n        return \"Dienstag\"\n    case 3:\n        return \"Mittwoch\"\n    case 4:\n        return \"Donnerstag\"\n    case 5:\n        return \"Freitag\"\n    case 6:\n        return \"Samstag\"\n    }\n}\n\nconst getMonthString = (month) => {\n    switch(month){\n    default:\n        return \"\"\n    case 0:\n        return \"Januar\"\n    case 1:\n        return \"Februar\"\n    case 2:\n        return \"März\"\n    case 3:\n        return \"April\"\n    case 4:\n        return \"Mai\"\n    case 5:\n        return \"Juni\"\n    case 6:\n        return \"Juli\"\n    case 7:\n        return \"August\"\n    case 8:\n        return \"September\"\n    case 9:\n        return \"Oktober\"\n    case 10:\n        return \"November\"\n    case 11:\n        return \"Dezember\"\n    }\n}\n\nexport default DateField"],"names":["Event","_ref2","att","states","oneAssociation","theme","plusone","setPlusone","useState","PlusOne","attendence","setAttendence","Attendence","_jsxs","children","_jsx","_Fragment","TableData","associationLogo","Association_ID","DateField","dateprops","Terminzusage","event","onClick","async","newAttendence","updateAttendence","Event_ID","event_id","cancelled","Type","includes","Ev_PlusOne","active","plusOne","Location","association_id","parseInt","src","four","alt","five","Table","styled","table","_templateObject","_taggedTemplateLiteral","td","_templateObject2","_ref","_attendences$","attendences","fullname","selectedDateFilter","selectedEventFilter","setOneAssociation","useEffect","every","filter","attDate","Date","setHours","Category","today","getTime","map","getDayOfWeek","d_o_w","getMonthString","month","date","dayOfWeek","getDay","day","getDate","getMonth","year","getFullYear"],"sourceRoot":""}